---

- name: RDS lifecycle - basic RDS functionality
  hosts: localhost
  vars:
    prefix: rds-
    test_router_name: "Apimon-test-rds-router"
    test_network_name: "Apimon-test-rds-network"
    test_subnet_name: "Apimon-test-rds-subnet"
    test_security_group_name: "Apimon-test-rds-sg"

  tasks:
    # Random selection between MySQL and PostgreSQL db engine
    - name: Random selection of DB type
      set_fact:
        db_type: "{{ ['mysql', 'postgresql'] | random }}"

    # Query all present versions of previously selected DB engine
    - name: Get datastore info
      opentelekomcloud.cloud.rds_datastore_info:
        datastore: "{{  db_type  }}"
      register: versions

    - name: debug datastores
      debug:
        var: versions.rds_datastores

    - name: Run Python script to find the latest version
      script: "latest_rds_version.py '{{ versions.rds_datastores | to_nice_json }}'"
      args:
        executable: python3
      register: latest_version_output

    - name: Get the latest version of DB
      set_fact:
        db_version: "{{ latest_version_output.stdout }}"

    - debug:
        msg: "DB type is {{  db_type  }} version {{ db_version }}"

    # Set random ID of the run
    - name: Set random ID of the run
      set_fact:
        rid: "{{ lookup('env', 'TASK_EXECUTOR_JOB_ID') | default(999999 | random, true) }}"

    # Combine it with the prefix and ensure it's truncated
    - name: Combine prefix with RID
      set_fact:
        prefix: "{{ ('rds-' + rid | string)[:10] }}"

    # Set all neccessary names combine with prefix
    - set_fact:
        test_rds_name: "{{  prefix  }}"
        test_router_name: "{{ ('vpc_'+ prefix + '-router')}}"
        test_subnet_name: "{{ ('vpc_'+ prefix + '-subnet')}}"
        test_network_name: "{{ ('vpc_'+ prefix + '-network')}}"        
        test_security_group_name: "{{ (prefix + '-sg') }}"
        password: "{{ ('Test8*' + prefix)[:20] }}"  # Ensure the password is within 20 characters


    # Query all flavoers for specific DB engine
    - name: Get info about choosen type of DB
      opentelekomcloud.cloud.rds_flavor_info:
        datastore: "{{  db_type }}"
        instance_mode: "single"
      register: rds_flavors

    # Find flavor with smallest RAM and smallest VCPUs
    - name: Set fact for smallest flavor based on RAM and VCPUs
      set_fact:
        smallest_flavor: "{{ rds_flavors.rds_flavors | sort(attribute='ram') | sort(attribute='vcpus') | first }}"

    # Print the smallest flavor details
    - name: Print smallest flavor
      ansible.builtin.debug:
        msg: "{{ smallest_flavor.name }}"
    
    # Set storage type
    - name: Set storage type based on RDS flavor spec code structure
      set_fact:
        volume_type: "{{ 'CLOUDSSD' if smallest_flavor.name.split('.')[2] in ['x1', 'n1'] else 'ULTRAHIGH' }}"

    # Debug to show the selected storage type
    - name: Print selected storage type
      ansible.builtin.debug:
        msg: "Selected storage type based on flavor spec code: {{ volume_type }}"
     
    - debug:
        msg: "Using prefix {{ prefix }}"
   

    - block:

      # Create VPC and Subnet only if the network doesn't exist
      - name: Create VPC (Router + Net + Subnet) if it doesn't exist
        include_role:
          name: opentelekomcloud.vpc
        vars:
          router_name: "{{ test_router_name }}"
          network_name: "{{ test_network_name }}"
          subnet_name: "{{ test_subnet_name }}"
          state: present
        # when: network_check.networks | length == 0

      # Create Security Group only if it doesn't exist
      - name: Create Security Group if it doesn't exist
        openstack.cloud.security_group:
          name: "{{ test_security_group_name }}"
          description: RDS test SG created by APImon
          state: present

      # Query all available Availability zones
      - name: Get Availability zones
        opentelekomcloud.cloud.availability_zone_info:
          # name: "{{ region }}"
        register: azs

      # Create RDS instance MySQL
      - name: Create RDS instance MySQL
        when: db_type == "mysql"
        opentelekomcloud.cloud.rds_instance:
          name: "{{ test_rds_name }}"
          state: present
          # availability_zone: "{{ azs['availability_zones'][0]['name'] }},{{ azs['availability_zones'][1]['name'] }}"
          availability_zone: "{{ azs['availability_zones'][0]['name'] }}"
          datastore_type: "{{ db_type }}"
          datastore_version: "{{ db_version }}"
          flavor: "{{ smallest_flavor.name }}"
          # ha_mode: "async"
          router: "{{ test_router_name }}"
          network: "{{ test_network_name }}"
          security_group: "{{ test_security_group_name }}"
          password: "{{ password }}"
          volume_type: "{{ volume_type }}"
          volume_size: 40
          backup_keepdays: 1
          backup_timeframe: "02:00-03:00"
          wait: true
          timeout: 777
        register: rds_mysql
        tags:
          - 'service=rds'
          - 'metric=create_rds_mysql'

      - set_fact: 
          rds: "{{ rds_mysql }}"
        when: db_type == "mysql"

      # Create RDS instance PostgreSQL
      - name: Create RDS instance PostgreSQL
        when: db_type == "postgresql"
        opentelekomcloud.cloud.rds_instance:
          name: "{{ test_rds_name }}"
          state: present
          # availability_zone: "{{ azs['availability_zones'][0]['name'] }},{{ azs['availability_zones'][1]['name'] }}"
          availability_zone: "{{ azs['availability_zones'][0]['name'] }}"
          datastore_type: "{{ db_type }}"
          datastore_version: "{{ db_version }}"
          flavor: "{{ smallest_flavor.name }}"
          # ha_mode: "async"
          router: "{{ test_router_name }}"
          network: "{{ test_network_name }}"
          security_group: "{{ test_security_group_name }}"
          password: "{{ password }}"
          volume_type: "{{ volume_type }}"
          volume_size: 40
          backup_keepdays: 1
          backup_timeframe: "02:00-03:00"
          wait: true
          timeout: 777
        register: rds_pg
        tags:
          - 'service=rds'
          - 'metric=create_rds_postgresql'

      - set_fact: 
          rds: "{{ rds_pg }}"
        when: db_type == "postgresql"


      # With this info module you can get info about your instance
      - name: Let's get info about whole RDS instance
        opentelekomcloud.cloud.rds_instance_info:
          name: "{{ rds.instance.name }}"

      - name: Let's get info about datastore
        opentelekomcloud.cloud.rds_datastore_info:
          name: "{{ rds.instance.id }}"


      # Querying RDS backup info. You can use any of specified attributes, together or separately.
      - name: Get RDS backup info
        opentelekomcloud.cloud.rds_backup_info:
          instance: "{{ rds.instance.id }}"
    
      always:
        - block:

          # Delete RDS instance PostgreSQL
          - name: Now Delete RDS instance PostgreSQL
            when: db_type == "postgresql"
            opentelekomcloud.cloud.rds_instance:
              name: "{{ rds.instance.id }}"
              state: absent
              wait: true
            tags:
              - 'service=rds'
              - "metric=delete_rds_postgresql"

          # Delete RDS instance MySQL
          - name: Now Delete RDS instance MySQL
            when: db_type == "mysql"
            opentelekomcloud.cloud.rds_instance:
              name: "{{ rds.instance.id }}"
              state: absent
              wait: true
            tags:
              - 'service=rds'
              - "metric=delete_rds_mysql"        

          ignore_errors: true
